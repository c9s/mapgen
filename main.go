package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"os"
	"regexp"
	"strings"
	"text/template"

	log "github.com/sirupsen/logrus"

	"golang.org/x/tools/go/packages"
)

var (
	typeName     = flag.String("type", "", "Type name to parse constants from; required")
	output       = flag.String("output", "", "Output file name; default: <type>map.go")
	outputStdout = flag.Bool("stdout", false, "Output generated content to stdout")
)

type ConstantInfo struct {
	Type         string
	Constants    []string
	HasIntValues bool
	Groups       map[string][]string
}

type Generator struct {
	pkg          *packages.Package
	Type         string
	constantInfo ConstantInfo
	outputBuffer bytes.Buffer
}

func main() {
	flag.Parse()

	if *typeName == "" {
		fmt.Println("Error: -type is required")
		os.Exit(1)
	}

	args := flag.Args()
	if len(args) == 0 {
		args = []string{"."}
	}

	// Load the current package
	pkgs, err := loadPackages(args[0])
	if err != nil {
		fmt.Printf("Error loading package: %v\n", err)
		os.Exit(1)
	}

	if len(pkgs) != 1 {
		fmt.Println("Error: Expected a single package")
		os.Exit(1)
	}

	gen := Generator{
		pkg:  pkgs[0],
		Type: *typeName,
		constantInfo: ConstantInfo{
			Type:      *typeName,
			Constants: []string{},
			Groups:    map[string][]string{},
		},
	}

	gen.parseConstants()

	if *outputStdout {
		gen.generateCode(os.Stdout)
	} else {
		outputFile := *output
		if outputFile == "" {
			outputFile = fmt.Sprintf("%smap.go", strings.ToLower(*typeName))
		}

		file, err := os.Create(outputFile)
		if err != nil {
			fmt.Printf("Error creating output file: %v\n", err)
			os.Exit(1)
		}
		defer file.Close()

		gen.generateCode(file)
		fmt.Printf("Generated file: %s\n", outputFile)
	}
}

func loadPackages(pattern string) ([]*packages.Package, error) {
	cfg := &packages.Config{
		Mode: packages.NeedName |
			packages.NeedTypes |
			packages.NeedSyntax |
			packages.NeedImports |
			packages.NeedTypesInfo,
	}

	return packages.Load(cfg, pattern)
}

func (g *Generator) parseConstants() {
	groupRegex := regexp.MustCompile(`^//\s*@group\s+(\S+)`) // Match lines like "// @group GroupName"

	for _, file := range g.pkg.Syntax {
		ast.Inspect(file, func(n ast.Node) bool {
			decl, ok := n.(*ast.GenDecl)
			if !ok || decl.Tok != token.CONST {
				return true
			}

			log.Printf("found const decl %+v", decl)

			var currentGroup string

			for _, spec := range decl.Specs {
				valueSpec, ok := spec.(*ast.ValueSpec)
				if !ok || len(valueSpec.Names) == 0 {
					continue
				}

				log.Printf("valueSpec.Names: %+v, type: %+v", valueSpec.Names, valueSpec.Type)

				// Check if the type matches
				if valueSpec.Type != nil {
					ident, ok := valueSpec.Type.(*ast.Ident)
					if !ok || ident.Name != g.constantInfo.Type {
						continue
					}
				}

				doc := decl.Doc
				if doc == nil {
					doc = valueSpec.Doc
				}

				// Parse group comment using regexp
				if doc != nil {
					for _, comment := range doc.List {
						matches := groupRegex.FindStringSubmatch(comment.Text)
						if len(matches) == 2 {
							currentGroup = strings.TrimSpace(matches[1])
						}
					}
				}

				// Collect constants
				for _, name := range valueSpec.Names {
					constName := name.Name
					g.constantInfo.Constants = append(g.constantInfo.Constants, constName)
					if currentGroup != "" {
						g.constantInfo.Groups[currentGroup] = append(g.constantInfo.Groups[currentGroup], constName)
					}
				}
			}

			return true
		})
	}
}

func (g *Generator) generateCode(output *os.File) {
	const templateText = `// Code generated by go:generate; DO NOT EDIT.
package {{.PkgName}}

var All{{.Type}} = map[{{.Type}}]struct{}{
{{- range .Constants }}
	{{.}}: {},
{{- end }}
}

{{- range $group, $constants := .Groups }}
var All{{$group}}{{$.Type}} = map[{{$.Type}}]struct{}{
{{- range $constants }}
	{{.}}: {},
{{- end }}
}
{{- end }}

var All{{.Type}}Slice = []{{.Type}}{
{{- range .Constants }}
	{{.}},
{{- end }}
}

// {{.Type}}Strings converts a slice of {{.Type}} to a slice of {{if .HasIntValues}}int{{else}}string{{end}}
func {{.Type}}Strings(slice []{{.Type}}) (out []{{if .HasIntValues}}int{{else}}string{{end}}) {
	for _, el := range slice {
		out = append(out, {{if .HasIntValues}}int{{else}}string{{end}}(el))
	}
	return out
}

// {{.Type}}Keys converts a map of {{.Type}} to a slice of {{.Type}}
func {{.Type}}Keys(values map[{{.Type}}]struct{}) (slice []{{.Type}}) {
	for k := range values {
		slice = append(slice, k)
	}
	return slice
}

// Validate{{.Type}} validates a value of type {{.Type}}
func Validate{{.Type}}(ch {{.Type}}) bool {
	_, ok := All{{.Type}}[ch]
	return ok
}
`

	tmpl, err := template.New("code").Parse(templateText)
	if err != nil {
		fmt.Printf("Error parsing template: %v\n", err)
		os.Exit(1)
	}

	data := struct {
		PkgName      string
		Type         string
		Constants    []string
		HasIntValues bool
		Groups       map[string][]string
	}{
		PkgName:      g.pkg.Name,
		Type:         g.constantInfo.Type,
		Constants:    g.constantInfo.Constants,
		HasIntValues: g.constantInfo.HasIntValues,
		Groups:       g.constantInfo.Groups,
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		fmt.Printf("Error generating template: %v\n", err)
		os.Exit(1)
	}

	// Use go/format to format the generated source code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Printf("Error formatting source: %v\n", err)
		os.Exit(1)
	}

	// Write the formatted source code to the output file
	_, err = output.Write(formatted)
	if err != nil {
		fmt.Printf("Error writing to output: %v\n", err)
		os.Exit(1)
	}
}
